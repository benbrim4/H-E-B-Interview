/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.heb.interview;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

import com.google.cloud.vision.v1.AnnotateImageRequest;
import com.google.cloud.vision.v1.AnnotateImageResponse;
import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;
import com.google.cloud.vision.v1.Feature;
import com.google.cloud.vision.v1.Image;
import com.google.cloud.vision.v1.ImageAnnotatorClient;
import com.google.cloud.vision.v1.LocalizedObjectAnnotation;
import com.google.cloud.vision.v1.Feature.Type;
import com.google.protobuf.ByteString;

import io.helidon.webserver.Routing;
import io.helidon.webserver.ServerRequest;
import io.helidon.webserver.ServerResponse;
import io.helidon.webserver.WebServer;

public class App {

    public static List<String> detectLocalizedObjects(String filePath) throws IOException {
        List<String> objects = new ArrayList<>();
        List<AnnotateImageRequest> requests = new ArrayList<>();

        ByteString imgBytes = ByteString.readFrom(new FileInputStream(filePath));

        Image img = Image.newBuilder().setContent(imgBytes).build();
        AnnotateImageRequest request = AnnotateImageRequest.newBuilder()
                .addFeatures(Feature.newBuilder().setType(Type.OBJECT_LOCALIZATION))
                .setImage(img)
                .build();
        requests.add(request);

        // Initialize client that will be used to send requests. This client only needs
        // to be created
        // once, and can be reused for multiple requests. After completing all of your
        // requests, call
        // the "close" method on the client to safely clean up any remaining background
        // resources.
        try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {
            // Perform the request
            BatchAnnotateImagesResponse response = client.batchAnnotateImages(requests);
            List<AnnotateImageResponse> responses = response.getResponsesList();

            // Display the results
            for (AnnotateImageResponse res : responses) {
                for (LocalizedObjectAnnotation entity : res.getLocalizedObjectAnnotationsList()) {
                    // System.out.format("Object name: %s%n", entity.getName());
                    // System.out.format("Confidence: %s%n", entity.getScore());
                    // System.out.format("Normalized Vertices:%n");
                    // entity
                    // .getBoundingPoly()
                    // .getNormalizedVerticesList()
                    // .forEach(vertex -> System.out.format("- (%s, %s)%n", vertex.getX(),
                    // vertex.getY()));
                    objects.add(entity.getName());
                }
            }
        }
        return objects;
    }

    public static void processRequest(ServerRequest req, ServerResponse res) {
        try {
            List<String> objects = detectLocalizedObjects(
                    "/Users/benbrim/Desktop/projects/H-E-B-interview/app/src/main/resources/nola.jpeg");
            System.out.println(objects.toString());
            res.status(200);
            res.send(objects.toString());
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        WebServer webServer = WebServer.builder().port(8080)
                .routing(Routing.builder().any((req, res) -> processRequest(req, res)))
                .build()
                .start()
                .await(10, TimeUnit.SECONDS);

        System.out.println("Server started at: http://localhost:" + webServer.port());
    }

}
